var got = require('got');
const request = require('request');
const util = require('util');

exports.handler = function(context, event, callback) {



    // Get Settings
    var settings = JSON.parse(decodeURI(event.setting));
    console.log("EVENT: " + JSON.stringify(event));
    console.log("Settings: " + JSON.stringify(settings));
    console.log("EVENT DIGITS: " + event.Digits);

    let twiml = new Twilio.twiml.VoiceResponse();


    if (event.Digits === "1" || event.Digits === "2") {


        if (event.Digits === "1") {
            Message_Phrase = settings.Alert_Phrase;
            what = 'Alert';

        } else {
            Message_Phrase = settings.Conference_Phrase;
            what = 'Conference';
        }

        console.log("what: " + what);

        const gather = twiml.gather({
            input: 'dtmf',
            numDigits: 1,
            action: settings.xm_record + '?setting=' + encodeURI(JSON.stringify(settings)) + '&Message_Phrase=' + encodeURI(Message_Phrase) + '&what=' + what
        });

        gather.say({ voice: 'alice', loop: 1 }, Message_Phrase + settings.Group_Speak_Text);
        twiml.pause({ length: 1 });
        twiml.redirect(settings.xm_group + '?setting=' + encodeURI(JSON.stringify(settings)) + '&Message_Phrase=' + encodeURI(Message_Phrase) + '&what=' + what + '&Digits=' + event.Digits);
        callback(null, twiml);
    }



    // Incorrect Actions Digits Repeat last step
    else {

        twiml.say({ voice: 'alice', loop: 1 }, 'Invalid Digit. Listen carefully.');

        const gather = twiml.gather({
            input: 'dtmf',
            numDigits: 1,
            action: settings.xm_group + '?setting=' + encodeURI(JSON.stringify(settings))
        });
        gather.say({ voice: 'alice', loop: 1 }, 'Press 1 to alert an x matters group. Press 2 to start an x matters conference bridge.');
        twiml.pause({ length: 1 });
        twiml.redirect(settings.xm_group + '?setting=' + encodeURI(JSON.stringify(settings)));

        callback(null, twiml);

    }


} // close handler