var got = require('got');
const request = require('request');
const util = require('util');

exports.handler = function(context, event, callback) {

    console.log("EVENT1: " + JSON.stringify(event));

    //***************************************
    // CONFIGURATION
    //***************************************
    //
    settings = {};

    // Twilio Function Paths
    settings.twilio_path = 'https://some-path-1234.twil.io';


    // xMatters Base URL
    // Do not include trailing slash
    xmatters = 'https://acme.xmatters.com';

    // xMatters Webservice User name and password
    xm_user = 'twiliouser';
    xm_pass = 'mycomplexpassword';

    // This is a verified phone number to use as the outgoing caller ID when initiating live calls to the primary on call of a group.
    // Instructions on how to Verified a phone number in Twilio.
    // https://support.twilio.com/hc/en-us/articles/223180048-Adding-a-Verified-Phone-Number-or-Caller-ID-with-Twilio
    // If you do not set a number Verified number here, the caller id will be the caller ID of the pone initiating this integration.
    setting.callerID = '15555555555';

    // Twilio SID and Secret API key for authenticating
    // into the Twilio API for transcription
    settings.twilio_sid = 'LONG-SID-VALUE-HERE';
    settings.twilio_sec = 'LONG-SECRET-HERE';

    // This is the Inbound Integration url for "On-Call Alert"
    settings.url_alert = 'https://acme.xmatters.com/api/integration/1/functions/UUID/triggers?apiKey=UUID-KEY-HERE';

    // This is the Inbound Integration url for "On-Call Conference Bridge"
    settings.url_conf = 'https://acme.xmatters.com/api/integration/1/functions/UUID/triggers?apiKey=UUID-KEY-HERE';


    // List of xMatters users that are allowed to initiate this integration
    // The caller ID initiating this event must be a voice device listed on an xMatters user profile

    Authorized_Users = ['userid1', 'userid2', 'userid3'];

    // Set the number of groups you would like to be able to target from this integration.
    // The number set below must match the number of groups you have in the xMatters_Groups and Speak_Groups arrays below.
    // If you set this value to 0 you must add groups / users as default recipients in the xMatters form layout.
    settings.NumberofGroups = 3;

    // Set the xMatters Group Names.
    // Group names must match the name of your xMatters groups exactly.
    // You can add additional Groups by adding parameters to the array below. 
    // This arry must have the same number of elements as the Speak_Group array below.
    settings.xMatters_Groups = ["Cloud DevOps", "CAB", "Database"];


    // Set the Twilio Group Name.
    // You can add additional punctuation, spaces, dashes, and upper case letters to group names to help the text to speach engine pronounce it better.
    // This arry must have the same number of elements as the xMatters_Groups array above.
    settings.Speak_Groups = ["Cloud Dev Ops.", "C.A.B.", "Database"];


    // Bitley Access Token
    settings.bitly_token = 'KEY-HERE';

    //***************************************
    // DO NOT MAKE CHANGES BELOW THIS COMMENT
    //***************************************


    // Sets required variables. Do not change this.

    settings.xm_settings = settings.twilio_path + '/xm_settings';
    settings.xm_action = settings.twilio_path + '/xm_action';
    settings.xm_group = settings.twilio_path + '/xm_group';
    settings.xm_record = settings.twilio_path + '/xm_record';
    setting.xm_livecall = setting.twilio_path + '/xm_livecall';
    setting.xm_escalate = setting.twilio_path + '/xm_escalate';
    settings.xm_confirmRec = settings.twilio_path + '/xm_confirmRec';
    settings.xm_shorten = settings.twilio_path + '/xm_shorten';
    settings.xm_message = settings.twilio_path + '/xm_message';


    var Authorized = '';
    event.what = '';
    event.who = '';
    settings.url;
    settings.Group_Speak_Text = '';
    settings.digit = '';
    settings.Message_Phrase = '';
    settings.Alert_Phrase = 'What group would you like to Alert? ';
    settings.Conference_Phrase = 'What group would you like to invite to the conference? ';
    setting.Livecall_Phrase = 'What group would you like to speak live with? ';
    settings.Wait_Phrase = 'You are a natural! Im sending this over to x matters.';


    // Set up the template variables.
    // You can customize this but be very careful.
    for (i = 0; i < settings.NumberofGroups; i++) {
        digit = i + 1;
        settings.Group_Speak_Text += "Press " + digit + " for " + settings.Speak_Groups[i] + ". ";

    }
    if (settings.NumberofGroups === 0) {

        settings.Alert_Phrase = 'Sure, I will send an Alert to the groups defined in xMatters. ';
        settings.Conference_Phrase = 'Sure, I will start a conference bridge with the groups defined in xMatters. ';
        setting.Livecall_Phrase = 'Sure, I will connect you to speak with the primary on call. ';
        settings.Group_Speak_Text = '';

    }


    // Get user devices from xMatters and compare with CallerID
    const promises = [];
    for (var user in Authorized_Users) {

        console.log("Checking if User is Authorized: " + Authorized_Users[user]);

        promises.push(get_auth(Authorized_Users[user]));

    }

    Promise.all(promises).then(function(results) {

        console.log('Final Authentication Results: ', results);

        // If we find a user who is authorized proceed  
        if (results.indexOf('Yes') > -1) {
            // there's a yes

            let twiml = new Twilio.twiml.VoiceResponse();

            twiml.redirect({
                method: 'POST'
            }, settings.xm_action + '?setting=' + encodeURI(JSON.stringify(settings)));

            callback(null, twiml);

        }
        // We did not find an athorized user exit
        else {

            let twiml = new Twilio.twiml.VoiceResponse();
            twiml.say({
                voice: 'alice'
            }, "Sorry, you are not authorized for this. Please speak with your x matters admin");

            callback(null, twiml);

        }

    }).catch(function(e) {
        console.log('Promises error', e);
    });


    function get_auth(user) {
        const promise = new Promise((resolve, reject) => {
            return get_xm_devices(user)
                .then(value => resolve(value))
                .catch(error => reject(error));
        });

        return promise;
    }


    function get_xm_devices(user) {

        console.log('Getting devices for "' + (xmatters + '/api/xm/1/people/' + user + '/devices') + '"');

        return got(xmatters + '/api/xm/1/people/' + user + '/devices', {
                headers: {
                    'accept': 'application/json',
                    'Authorization': 'Basic ' + Buffer.from(xm_user + ':' + xm_pass).toString('base64')
                },
                json: true
            })

            .then(function(response) {

                resdata = response.body.data;

                console.log("get_xm_devices Response " + JSON.stringify(resdata));

                for (var device in resdata) {

                    Authorized = 'No';

                    // User has voice device check if the caller Id on initiating phone exists.
                    if (resdata[device].deviceType === "VOICE") {

                        console.log("User VOICE Device: '" + JSON.stringify(resdata[device].phoneNumber) + "' ?= '" + JSON.stringify(event.From) + "': " + (resdata[device].phoneNumber === event.From));

                        // Authorized. User Voice device matching caller ID found.
                        if (resdata[device].phoneNumber === event.From) {
                            return "Yes";
                        }

                    }
                }
		// To disable user authentication change the next like to "  return 'Yes';"
                return 'No';

            })
            .catch(function(error) {

                console.log("get_xm_devices error " + error);

                // We'll just skip the 404, if the user isn't found, then
                // he wouldn't be auth'd anyway
                if (error.statusCode != 404)
                    callback(error);

                // Boo, there was an error.
                let twiml = new Twilio.twiml.VoiceResponse();
                twiml.say({
                    voice: 'alice'
                }, 'Oops, something went wrong. The event has not been sent. You will need to send this event directly from x matters.');

            });
    }

};